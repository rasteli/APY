import flask
import numpy
from flask import Flask, request
import face_recognition as fr

api = Flask(__name__)

def rec_face(url_foto):
    foto = fr.load_image_file(url_foto)
    rostos = fr.face_encodings(foto)

    if (len(rostos) > 0):
        return True, rostos

    return False, []

# Link de como enviar uma imagem diretamente pela API
# LINK: https://cursos.alura.com.br/forum/topico-envio-de-json-e-imagem-em-uma-requisicao-post-com-spring-boot-62481

rostos_conhecidos = """[array([-0.18999806,  0.09181959,  0.05398746, -0.02539089, -0.07755579,
        0.00157795,  0.02924858, -0.11348854,  0.18666264, -0.12769239,
        0.27059242, -0.00386803, -0.19690558, -0.10774018,  0.04296279,
        0.13237168, -0.15865779, -0.18341675, -0.04688223, -0.15278886,
       -0.0355197 ,  0.02685094, -0.04276567,  0.07567826, -0.09613626,
       -0.36105052, -0.09564231, -0.17100757,  0.05349781, -0.12236793,
        0.04388919,  0.11164107, -0.1326779 ,  0.00325499, -0.05697833,
        0.00251825,  0.02190621,  0.0026919 ,  0.23204255,  0.04064611,
       -0.16880074, -0.0688988 , -0.01078984,  0.36165029,  0.14286216,
       -0.0632884 , -0.03086857,  0.06189249,  0.08356602, -0.19844951,
        0.01309435,  0.1164614 ,  0.16425762,  0.00073384,  0.01480829,
       -0.11872925, -0.07808521,  0.01248083, -0.22369632,  0.05554335,
       -0.00936535, -0.19681726, -0.09269167, -0.02315198,  0.35101837,
        0.14469039, -0.11747888, -0.09349823,  0.25572759, -0.07838674,
       -0.03799534,  0.06350969, -0.16149528, -0.12819938, -0.24530827,
        0.12824139,  0.48559776,  0.07041384, -0.20508398,  0.04574339,
       -0.19213033, -0.0427152 ,  0.00495084,  0.10230297, -0.08989643,
        0.01481289, -0.08348418,  0.03378768,  0.14900316,  0.00745978,
       -0.11715754,  0.20736015, -0.00814347,  0.04515138,  0.0723501 ,
       -0.01981034, -0.02658053, -0.11584336, -0.13755634, -0.10108508,
        0.01334805, -0.0752392 ,  0.00149162,  0.11484213, -0.152513  ,
        0.16452467,  0.09622201, -0.01094114, -0.01216014,  0.12640367,
       -0.08436634, -0.10443243,  0.14825642, -0.26259774,  0.15494032,
        0.10354574,  0.05815515,  0.20019206,  0.02609503,  0.05231083,
       -0.05229371, -0.05555752, -0.09007124, -0.04207797,  0.11799862,
        0.01488148,  0.06889163,  0.0673762 ]), array([-0.08727547, -0.01050641,  0.01471402,  0.02703693, -0.03882   ,
        0.07828561,  0.03615384, -0.07358874,  0.17091104, -0.17528284,
        0.20874253, -0.06539362, -0.12148287, -0.03149511,  0.00236424,
        0.10095595, -0.13162394, -0.10196145, -0.04796769, -0.03526555,
       -0.00356831, -0.02254697, -0.04743145,  0.05163531, -0.21517852,
       -0.34312025, -0.06716944, -0.17438596,  0.07285251, -0.04338099,
       -0.05604029,  0.05848553, -0.14099659,  0.02164572,  0.03007962,
        0.07279799, -0.04572469,  0.00781358,  0.26067781, -0.02711919,
       -0.15647401,  0.07521961,  0.02879776,  0.2807292 ,  0.13161409,
        0.02301557,  0.0272247 , -0.05909131,  0.17377506, -0.25003707,
        0.0900478 ,  0.07329102,  0.16326492,  0.05216317,  0.06400904,
       -0.19718336, -0.0112933 ,  0.03348889, -0.16677062,  0.15832491,
        0.02967478, -0.04009553,  0.01206736,  0.00817566,  0.20509201,
        0.08144672, -0.07180554, -0.10080907,  0.21602084, -0.18239708,
        0.09377404,  0.0488961 , -0.10880533, -0.24776876, -0.20495594,
        0.07201263,  0.43285602,  0.20028892, -0.15391274,  0.04748181,
       -0.06006535, -0.02616606,  0.1265751 ,  0.06376388, -0.05355627,
       -0.06263118, -0.01887908,  0.06952503,  0.26357928, -0.02269294,
       -0.01126933,  0.17525306,  0.00144598, -0.00735246,  0.00602564,
       -0.09430058, -0.07531963,  0.00164939, -0.09367068,  0.05902208,
       -0.04874881, -0.10549068,  0.06738158,  0.1031392 , -0.26754233,
        0.18967529, -0.02824009, -0.05564214,  0.037854  ,  0.12230381,
       -0.1631171 ,  0.00209031,  0.18131596, -0.27793446,  0.18815723,
        0.13937651,  0.09800845,  0.18693741,  0.04735555,  0.05115664,
        0.05031154,  0.054151  , -0.22069179, -0.02939366,  0.03987307,
       -0.06883229,  0.03972737,  0.04412843]), array([-1.25133498e-02,  6.28716648e-02,  8.34067613e-02, -1.01235308e-01,
       -1.38325080e-01,  9.63163599e-02, -1.29620478e-01, -1.78552717e-02,
        2.10988969e-01, -1.14297666e-01,  1.49969310e-01,  5.33779413e-02,
       -2.55672812e-01,  5.34995049e-02, -3.42144072e-02,  1.25308439e-01,
       -1.25036910e-01, -7.94118792e-02, -2.17331424e-02, -8.75814706e-02,
       -2.08155718e-04,  1.24720216e-01,  7.45418621e-03,  1.84231773e-02,
       -1.23492084e-01, -3.07318240e-01, -5.01766801e-02, -8.59474242e-02,
        3.86172421e-02, -9.68664289e-02, -1.38401195e-01,  7.87200332e-02,
       -7.60934502e-02, -2.85171345e-03,  3.39368582e-02,  1.29240498e-01,
       -4.78098914e-02, -8.17298740e-02,  1.54937744e-01,  9.61832106e-02,
       -1.54128298e-01, -5.85736409e-02,  1.68227926e-02,  2.45816633e-01,
        1.94353536e-01, -3.98410521e-02,  9.47057083e-02, -7.02185780e-02,
        1.14938051e-01, -2.99682289e-01,  1.17535837e-01,  1.31701365e-01,
        1.09830745e-01,  8.63712728e-02,  1.01497874e-01, -1.82819724e-01,
       -3.94052602e-02,  1.60927579e-01, -1.10120058e-01,  1.32703140e-01,
        9.87479985e-02, -2.64812149e-02, -5.51185273e-02, -5.22865281e-02,
        2.32380256e-01,  1.34687528e-01, -1.32715419e-01, -1.68040723e-01,
        1.69150829e-01, -1.13898680e-01, -1.42716125e-01,  6.01856038e-02,
       -1.31346062e-01, -1.47126839e-01, -2.42488191e-01,  4.99741808e-02,
        3.18244308e-01,  1.60864368e-01, -1.80286840e-01,  1.06781833e-02,
       -6.88850582e-02, -4.34945896e-02,  1.84734743e-02,  7.24537075e-02,
       -7.92278722e-02,  4.11139317e-02, -5.17533496e-02,  4.47406061e-02,
        2.37299755e-01, -1.06021464e-02, -2.73931632e-03,  2.31124684e-01,
        3.18555087e-02,  6.15391806e-02,  4.11057100e-02,  1.28014788e-01,
       -7.84121081e-02, -3.65452766e-02, -1.85798645e-01, -4.91875038e-02,
        8.31295773e-02, -1.24939330e-01, -3.19959433e-03,  1.58110887e-01,
       -2.44202077e-01,  1.97066486e-01, -5.06326593e-02, -4.85310778e-02,
        4.14829366e-02, -2.96263322e-02, -1.13733746e-01,  1.17745697e-02,
        2.69630939e-01, -2.23455712e-01,  1.13477282e-01,  1.77238926e-01,
        1.37653276e-01,  1.21392243e-01,  7.78899118e-02,  3.94816063e-02,
        3.94374132e-02, -9.71064195e-02, -1.82010204e-01, -7.83205703e-02,
        6.10228255e-03, -5.56336977e-02, -6.05585240e-02,  8.98945034e-02]), array([-0.13374045,  0.11762235,  0.10377696,  0.00560364, -0.09953176,
        0.00652705, -0.09811568, -0.0534975 ,  0.13246635, -0.1615994 ,
        0.22983921,  0.00598924, -0.17642829,  0.04610904,  0.03060256,
        0.1043808 , -0.1529557 , -0.09312353, -0.07010913, -0.02069056,
        0.02668481,  0.08227064,  0.03984725,  0.08142239, -0.15856482,
       -0.36531547, -0.08929936, -0.12512636, -0.04686089, -0.06997491,
       -0.01751866, -0.03066406, -0.09065868,  0.03714625,  0.01850533,
        0.0384101 , -0.02863187, -0.0600715 ,  0.24868664,  0.02075116,
       -0.20183383,  0.04935501,  0.04083108,  0.24871522,  0.20255089,
        0.0126014 ,  0.00678094, -0.06397143,  0.14389695, -0.2715283 ,
        0.10195617,  0.16137418,  0.0547417 ,  0.08062223,  0.13602296,
       -0.09016588,  0.00068352,  0.14565405, -0.12144949,  0.05734244,
        0.01598528,  0.02120221,  0.09991449,  0.00340543,  0.21982847,
        0.1267648 , -0.10640601, -0.0594607 ,  0.088831  , -0.15585279,
       -0.07947924,  0.08376093, -0.15410532, -0.24572986, -0.19478859,
        0.09444328,  0.43060231,  0.17104384, -0.17185771, -0.00716344,
       -0.02187501, -0.12662522,  0.08690443,  0.11107508, -0.05040184,
       -0.10233235, -0.0234504 ,  0.07710958,  0.29582521,  0.03299492,
       -0.00769506,  0.29114014,  0.03256572,  0.00733461,  0.05117471,
        0.0171184 , -0.05457134, -0.03750018, -0.13254687,  0.01448747,
       -0.03178048, -0.04081322, -0.04500596,  0.09715635, -0.23785774,
        0.10923646, -0.02262809, -0.08443819, -0.01373366,  0.08090905,
       -0.13204947, -0.02523445,  0.15856263, -0.20221853,  0.17151889,
        0.13413173,  0.06555631,  0.14619949,  0.03183888,  0.02879601,
        0.03848167, -0.01554402, -0.11827337, -0.05268152,  0.09136941,
       -0.00521398,  0.04563902,  0.00597967]), array([-0.02639773, -0.01608022,  0.02861858, -0.05791091, -0.1154518 ,
        0.00765567, -0.10285136,  0.03364901,  0.16579461, -0.08760391,
        0.1809894 , -0.03641621, -0.27270749, -0.03912953, -0.00065391,
        0.08230319, -0.11385293, -0.12578404,  0.02429527, -0.09614953,
        0.13192073,  0.10874175, -0.01808088,  0.08604617, -0.20076162,
       -0.35995793, -0.10488555, -0.16646005, -0.01558895, -0.16792817,
        0.00733153,  0.03587018, -0.17911005, -0.03267385,  0.04517745,
        0.13216412,  0.01341715, -0.08066578,  0.15136729,  0.08192016,
       -0.11643292,  0.06734791,  0.02007333,  0.22624694,  0.08578903,
        0.05654494,  0.05565843, -0.029764  ,  0.16673444, -0.29527014,
        0.07540173,  0.17238395,  0.05082863,  0.06946555,  0.1260716 ,
       -0.13347951,  0.03526625,  0.19035272, -0.23533951,  0.16699328,
        0.0391337 , -0.03036486, -0.02335944, -0.02821657,  0.14920232,
        0.06112724, -0.08674225, -0.14967275,  0.13528764, -0.17102094,
       -0.1122244 ,  0.134672  , -0.13662761, -0.1647002 , -0.26040682,
        0.09315217,  0.37744594,  0.14325631, -0.1214214 ,  0.0851017 ,
       -0.02707988,  0.02408211,  0.01352781, -0.01173924, -0.01289138,
       -0.00315699, -0.1107887 ,  0.10466854,  0.20430987,  0.04448397,
        0.02297609,  0.24218366, -0.01675151,  0.1305999 ,  0.06018308,
        0.07171168, -0.10108549, -0.07807595, -0.07488679,  0.00552993,
        0.05706163, -0.08265598, -0.02396678,  0.07497411, -0.20088835,
        0.11476915, -0.09332858, -0.09934475, -0.0799356 ,  0.05144254,
       -0.12875073,  0.07982165,  0.16195944, -0.32326981,  0.21257238,
        0.17439017,  0.07399768,  0.119398  ,  0.01349555, -0.01311688,
       -0.03638194, -0.13181403, -0.21339244, -0.14053434, -0.00175919,
        0.00242602, -0.02831055, -0.00186651]), array([-1.21874444e-01,  4.66278344e-02,  7.12504685e-02,  5.59650324e-02,
       -2.33658161e-02, -8.02491605e-02,  3.14776227e-02, -6.17353022e-02,
        1.94990113e-01, -1.21165976e-01,  2.78430730e-01, -3.93069126e-02,
       -1.74546227e-01, -5.39955571e-02, -2.72937194e-02,  1.50943160e-01,
       -1.09521724e-01, -3.78978178e-02, -6.65732175e-02, -8.13333690e-02,
        1.90973599e-02, -3.18992361e-02,  3.05407029e-03,  1.58513501e-01,
        7.68882409e-03, -2.58497506e-01, -1.03756689e-01, -1.86457083e-01,
        1.35255575e-01, -5.94484769e-02, -4.15543877e-02,  3.88572775e-02,
       -1.06970951e-01, -2.94916909e-02, -5.96410334e-02, -3.70117426e-02,
       -1.77251268e-02, -5.06776869e-02,  2.55256921e-01, -2.31787376e-03,
       -1.55675694e-01,  1.01581262e-02, -6.23697229e-02,  2.66090333e-01,
        8.04353058e-02,  2.84046214e-03,  4.34828252e-02, -1.69780347e-02,
        6.64152429e-02, -1.47215396e-01,  2.60317232e-02,  1.32430688e-01,
        1.86407298e-01,  2.84288228e-02,  1.13087930e-02, -2.28973180e-01,
       -3.19701135e-02,  3.78852449e-02, -1.64369226e-01,  1.04486398e-01,
        5.79715148e-03, -3.08000632e-02, -5.01669794e-02, -1.83919948e-02,
        2.24242657e-01,  1.57210693e-01, -9.64414254e-02, -1.36051476e-01,
        2.27338910e-01, -1.93231806e-01,  2.86017936e-02,  9.47066993e-02,
       -1.61735162e-01, -1.82581723e-01, -1.59279317e-01,  6.37008399e-02,
        3.86144072e-01,  1.55414402e-01, -1.52959689e-01,  3.36489268e-02,
       -1.48670897e-01, -3.34907100e-02,  2.92251892e-02,  1.26509249e-01,
       -6.51424378e-02,  1.02034621e-02, -2.86158957e-02, -1.92060582e-02,
        9.09471512e-02, -1.68197677e-02, -3.68852392e-02,  2.25602180e-01,
        2.46184506e-02,  1.60666816e-02, -4.24095355e-02, -1.32835060e-01,
        1.16286799e-02, -1.12582315e-02, -5.69880344e-02,  1.74468346e-02,
       -4.81552221e-02, -8.22835565e-02,  1.61954667e-02, -1.05968732e-02,
       -2.16149256e-01,  1.07202485e-01,  5.23753166e-02,  2.15749331e-02,
       -2.00421549e-04,  1.72596708e-01, -1.55633852e-01, -2.24722084e-02,
        1.83092937e-01, -2.25316912e-01,  2.36297816e-01,  1.62284553e-01,
        1.27251297e-01,  1.28232047e-01,  5.85137606e-02,  9.88745317e-02,
        4.81978692e-02, -6.48046881e-02, -1.39804751e-01, -1.12674264e-02,
        6.96920007e-02, -8.80018771e-02,  1.21489204e-02,  4.36231792e-02]), array([-4.08320278e-02,  8.83789137e-02,  2.33773421e-02, -1.11151651e-01,
       -1.16303451e-01,  1.17144883e-02, -3.63884605e-02, -1.87192157e-01,
        2.34607816e-01, -1.95702359e-01,  2.27574363e-01, -1.90184172e-03,
       -1.43919706e-01,  4.98221070e-03, -3.68029140e-02,  1.40602037e-01,
       -1.78772986e-01, -1.64601848e-01,  1.50106661e-02, -4.74730805e-02,
        6.22914266e-03, -7.04182079e-03, -8.26867670e-03,  8.37043747e-02,
       -1.26544505e-01, -3.19152802e-01, -1.31449237e-01, -1.71636537e-01,
        4.45183478e-02, -6.05038367e-02, -3.21821012e-02,  1.15821384e-01,
       -1.57435328e-01,  2.41783969e-02, -3.84296514e-02,  3.13738212e-02,
       -2.71285716e-02, -2.38734819e-02,  2.20226586e-01,  2.22240053e-02,
       -2.06306949e-01, -7.20141903e-02,  3.52484360e-02,  2.08901584e-01,
        1.67659864e-01, -7.91098028e-02,  2.47049183e-02, -5.11199981e-02,
        4.85596582e-02, -1.28695309e-01,  3.62345986e-02,  9.71986130e-02,
        1.11638516e-01,  9.87502635e-02, -3.55879366e-02, -1.46367639e-01,
        8.07400420e-03,  1.79143772e-02, -1.64315268e-01,  3.96756679e-02,
        9.51239914e-02, -1.10132404e-01, -7.26922303e-02,  2.82169394e-02,
        3.63477200e-01,  1.31369397e-01, -1.45354033e-01, -1.27164930e-01,
        1.96258098e-01, -1.42255560e-01, -9.84794199e-02,  1.10461842e-02,
       -1.78674147e-01, -1.04463674e-01, -2.72176832e-01,  2.18126290e-02,
        4.58172321e-01,  9.20515358e-02, -1.68902129e-01,  5.26334792e-02,
       -1.61333919e-01, -6.69480860e-02,  3.03058662e-02,  1.26668274e-01,
       -8.39389861e-02,  4.46948968e-02, -3.35775912e-02,  3.79195362e-02,
        1.94211483e-01,  1.36196613e-05, -6.51155934e-02,  2.08228901e-01,
       -4.31964621e-02,  1.06920533e-01,  3.98452803e-02,  5.24454713e-02,
       -4.73888069e-02, -6.25416115e-02, -1.28243953e-01, -3.89680788e-02,
       -3.38748954e-02, -5.60614839e-02, -4.02226076e-02,  2.03947753e-01,
       -1.95829123e-01,  1.90039650e-01,  3.31119373e-02, -7.65775284e-03,
        1.67303421e-02,  1.25888929e-01, -1.20470151e-01, -1.31307766e-01,
        1.72937214e-01, -2.05827579e-01,  1.32813022e-01,  1.14338815e-01,
        1.05701379e-01,  1.25384375e-01,  9.14083272e-02,  7.34257177e-02,
       -3.37606892e-02, -4.07811180e-02, -2.18021914e-01,  5.94616076e-03,
        9.45510045e-02, -5.63343316e-02,  6.33282065e-02,  6.75136372e-02]), array([-0.11902922,  0.03446767,  0.08580656, -0.03782906, -0.17727382,
        0.09121697, -0.04747181,  0.02907401,  0.08249779, -0.10216636,
        0.21368143,  0.01291328, -0.25954032,  0.02526403,  0.04496759,
        0.0785905 , -0.0925191 , -0.12475146, -0.07584696, -0.02242018,
       -0.07615101,  0.0681769 , -0.01254105,  0.03639918, -0.16699523,
       -0.29943684, -0.04911707, -0.14854817,  0.01689991, -0.10104901,
        0.01952203,  0.0431343 , -0.12441727,  0.00214994,  0.04444177,
        0.12279361, -0.13334113, -0.05051696,  0.26906031,  0.06742866,
       -0.17677185,  0.00335279, -0.00797476,  0.28327248,  0.10278301,
        0.0245978 ,  0.07772503, -0.07696714,  0.05711783, -0.27623674,
        0.12781122,  0.19646887,  0.13630006,  0.06560055,  0.04261806,
       -0.15206167,  0.02364159,  0.15612121, -0.1542125 ,  0.13561191,
        0.07038108, -0.03419419, -0.02634827, -0.07296703,  0.24701729,
        0.07716613, -0.10912991, -0.12491892,  0.16429828, -0.12636372,
       -0.14554903,  0.13738185, -0.1373338 , -0.23060633, -0.1947282 ,
        0.09768985,  0.32536104,  0.21568947, -0.18375053,  0.00991552,
       -0.05848087, -0.07213568,  0.01662001,  0.13378079, -0.05564277,
       -0.04503323,  0.00097406,  0.04543272,  0.23701963, -0.01920296,
       -0.00711613,  0.18056072,  0.08197598,  0.00652928,  0.03601297,
       -0.0773501 , -0.02133946, -0.07056458, -0.1443073 , -0.06179423,
        0.01404994, -0.06386413,  0.00215724,  0.08300073, -0.21937881,
        0.19603857, -0.01935943, -0.11627122,  0.01450613, -0.00776183,
       -0.11926447,  0.00793792,  0.25949964, -0.25533584,  0.20989582,
        0.18155678,  0.11427818,  0.12251265,  0.1765531 ,  0.03820053,
        0.03238844, -0.02530497, -0.2132073 , -0.07478064,  0.09934232,
       -0.04772015,  0.066828  ,  0.0200184 ])]""".replace("array", "") # Provisório

@api.route("/")
def raiz():
    response = flask.jsonify({"message": "Hello, world!"})
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response

# Obter rosto

@api.route("/getface", methods=["POST"])
def teste2():
    face = ""
    error = False
    error_message = ""
    code = 404
    faces = []

    for x in range(1, len(request.files)+1):
        arquivo = request.files.get(f"img{x}")
        
        try:
            desconhecido = rec_face(arquivo)
        except:
            print("There was an error.")
        
        n_pessoas = len(desconhecido[1])

        if (n_pessoas == 1):
            if (desconhecido[0]):
                rosto = desconhecido[1][0]
                face = str(rosto)
                face = face.replace("\n", "")
                face = face.replace("\\", "")
                while ("  " in face):
                    face = face.replace("  ", " ")
                face = face.replace(" ", ", ")
                faces.append(face)
                code = 200
        else:
            error = True
            error_message = "There must be one and only one person during face identification"
            code = 400

    response = flask.jsonify({"status": code, "error": error, "error_message": error_message, 'faces': str(faces)})
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response, code

# Comparar rostos

@api.route("/compare", methods=["POST"])
def compare():
    familiar_faces = eval(request.form["familiar_faces"])
    faces = eval(request.form["faces"])

    print(familiar_faces)

    probs = []
    code = 200
    error = False
    error_message = ""

    for face in faces:
        face = numpy.array(eval(face), dtype=float)
        distances = fr.face_distance(familiar_faces, face)
        prob = list(map(lambda x: 1 - x, distances))
        probs.append(prob)

    res = []
    parcial = []

    for i in range(0, len(probs[0])-1):
        for pr in probs:
            parcial.append(pr[i])

        media = sum(parcial)/len(parcial)
        res.append(media)
        parcial = []

    index = numpy.argmax(res)
    response = flask.jsonify({
        "status": code, 
        "error": error, 
        "error_message": error_message,
        "probs": str(probs), 
        "res": str(res),
        "index": str(index)
    })

    response.headers.add('Access-Control-Allow-Origin', '*')
    return response, code


if __name__ == "__main__":
    api.run(debug=True, port=8000)
